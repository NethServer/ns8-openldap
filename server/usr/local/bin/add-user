#!/bin/ash

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

# shellcheck shell=dash disable=SC3001,SC3003,SC3028

usage_error()
{
    exec 1>&2
    [ -n "$1" ] && printf "Error: %s\n" "$1"
    printf "Usage: %s [OPTIONS] USER\n" "$0"
    printf "    USER                    Add/Create a new USER account\n"
    printf "    OPTIONS\n"
    printf "      -g group1,group2,...  Comma-separated list of groups for initial membership \n"
    printf "      -d display_name       The user display name\n"
    printf "      -p password           Initial password; \"-\" reads from standard input\n"
    printf "      -G numgid             Set the primary group number\n"
    printf "      -U numuid             Set the numeric user identifier\n"
    printf "      -m mail               Set the user email address\n"
    exit 2
}

ngid=1001
maxid=$(ldapsearch -b "ou=People,${LDAP_SUFFIX}" "(uid=*)" uidNumber | awk  '$0 ~ /^uidNumber:/ {print $2}' | sort -n | tail -n 1)
nuid=$(( maxid + 1 ))

while getopts "g:d:p:m:G:U:h" optname ; do
    case ${optname} in
        g)  gflag=1 ; groups="${OPTARG}" ;;
        G)  ngid="${OPTARG}" ;;
        U)  nuid="${OPTARG}" ;;
        d)  dflag=1 ; display_name="${OPTARG}" ;;
        p)  pflag=1 ; password="${OPTARG}" ;;
        m)  mflag=1 ; mail="${OPTARG}" ;;
        h)  usage_error ;;
        *)  usage_error ;;
    esac
done
shift $((OPTIND - 1))
user=${1}
if [ -z "${user}" ]; then
    usage_error "Missing USER argument"
fi

if [ "${pflag}" = 1 ]; then
    if [ "${password}" = '-' ]; then
        echo -n "Enter password: "
        read -r password # Read password from stdin
        echo
    elif [ "${password}" = '' ]; then
        password=$(dd if=/dev/urandom of=/dev/stdout bs=32 count=1 | base64 -w 0)
    fi
fi

if [ "${dflag}" = 1 ] && [ -n "${display_name}" ]; then
    ldif_display_name=$(echo -n "${display_name}" | base64 -w 0)
fi

(
    # Add the new user entry
    printf 'dn: uid=%s,ou=People,%s\n' "${user}" "${LDAP_SUFFIX:?}"
    printf 'changetype: add\n'
    printf 'objectClass: posixAccount\n'
    printf 'objectClass: inetOrgPerson\n'
    printf 'uid: %s\n' "${user}"
    printf 'uidNumber: %d\n' "${nuid}"
    printf 'gidNumber: %d\n' "${ngid}"
    printf 'homeDirectory: /home/%s\n' "${user}"
    if [ -n "${ldif_display_name}" ]; then
        ldif_cn=$(echo -n "${display_name}" | awk '{print $1}' | base64 -w 0)
        printf 'cn:: %s\n' "${ldif_cn}"
        ldif_sn=$(echo -n "${display_name}" | awk '{$1=""; print $0}' | base64 -w 0)
        printf 'sn:: %s\n' "${ldif_sn}"
        printf 'displayName:: %s\n' "${ldif_display_name}"
    else
        printf 'cn: %s\n' "${user}"
        printf 'sn: %s\n' "${user}"
    fi

    # Add mail attribute
    if [ -n "${mail}" ]; then
        printf 'mail: %s\n' "${mail}"
    fi

    # Add group membership attributes to existing groups
    if [ "${gflag}" = 1 ] && [ -n "${groups}" ]; then
        echo "${groups}" | tr , $'\n' | LC_ALL=C sort | while read -r group ; do
            [ -z "${group}" ] && continue
            printf '\ndn: cn=%s,ou=Groups,%s\n' "${group}" "${LDAP_SUFFIX:?}"
            printf 'changetype: modify\n'
            printf 'add: memberUid\n'
            printf 'memberUid: %s\n' "${user}"
        done
    fi
) | ldapmodify -Q

exit_code=$?

if [ "${pflag}" = 1 ]; then
    echo -n "${password}" | ldappasswd -Q -T /dev/stdin "uid=${user},ou=People,${LDAP_SUFFIX:?}"
    exit_code=$((exit_code + $?))
fi

exit "${exit_code}"
